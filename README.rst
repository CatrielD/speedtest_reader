speedtest_reader
================

Library to read, buffer and time-slice output generated by
`speedtest-cli <https://github.com/sivel/speedtest-cli>`_

.. image:: https://img.shields.io/pypi/v/speedtest-reader.svg
        :alt: Latest Version
.. image:: https://img.shields.io/travis/shuntingyard/speedtest-reader.svg
         :target: https://travis-ci.com/shuntingyard/speedtest_reader
        :alt: Travis
.. image:: https://img.shields.io/pypi/l/speedtest-reader.svg
        :target: https://github.com/shuntingyard/speedtest_reader/blob/master/LICENSE.txt
        :alt: License

Versions
--------

speedtest_reader works with Python 3.1-3.7

.. image:: https://img.shields.io/pypi/pyversions/speedtest-reader.svg
        :alt: Versions

Recent changes
--------------

- Complete API redesign (see Python API below)

Installation
------------

pip / easy\_install
~~~~~~~~~~~~~~~~~~~

::

    pip install speedtest_reader

or

::

    easy_install speedtest_reader

Github
~~~~~~

::

    pip install git+https://github.com/shuntingyard/speedtest_reader.git

or

::

    git clone https://github.com/shuntingyard/speedtest_reader.git
    cd speedtest_reader
    python setup.py install

Python API
----------

.. include:: examples/apiconfig.py
   :literal:
   :language: Python

Example section
---------------

plotly
~~~~~~

.. include:: examples/plotly_example.py
   :literal:
   :language: Python

seaborn
~~~~~~~

.. include:: examples/seaborn_example.py
   :literal:
   :language: Python

timezone config
~~~~~~~~~~~~~~~

.. code:: python

   from speedtest_reader import format_timestamps, Reader, util

   sensor1 = Reader("~/speedtest.csv")


   @util.append_tslocal(tz="EST")  # zone for local timestamp to append
   def slice_EST(**kwargs):
       kwargs["tz"] = "EST"  # zone to use for slicing
       start, end = format_timestamps(**kwargs)
       return sensor1.copy_df(start, end)


   # use local timezone (selected by module 'tzlocal')
   @util.append_tslocal()
   def slice_local(**kwargs):
       start, end = format_timestamps(**kwargs)
       return sensor1.copy_df(start, end)


   # test configured- and local timezone setup
   print(slice_EST(start="yesterday"))
   print(slice_local(start="yesterday"))

.. include:: CHANGELOG.rst
